<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Detail | KnowYourGovNow</title>
     <link rel="icon" type="image/png" sizes="56x56" href="/images/top.png">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --dark-color: #1a1a2e;
            --light-color: #f8f9fa;
            --success-color: #4cc9f0;
            --warning-color: #f8961e;
            --danger-color: #f94144;
            --sidebar-width: 250px;
            --header-height: 60px;
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fb;
            color: #333;
            overflow-x: hidden;
        }

        .dashboard {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: var(--dark-color);
            color: white;
            position: fixed;
            height: 100vh;
            transition: var(--transition);
            z-index: 100;
        }

        .sidebar-header {
            padding: 1rem;
            height: var(--header-height);
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h3 {
            font-size: 1.2rem;
            color: white;
        }

        .sidebar-menu {
            padding: 1rem 0;
        }

        .sidebar-menu li {
            list-style: none;
            margin-bottom: 0.5rem;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.5rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: var(--transition);
        }

        .sidebar-menu a:hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .sidebar-menu a.active {
            background: var(--primary-color);
            color: white;
        }

        .sidebar-menu i {
            margin-right: 0.8rem;
            font-size: 1.1rem;
        }

        .sidebar-menu span {
            font-size: 0.9rem;
        }

        .sidebar-collapse {
            display: none;
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            transition: var(--transition);
        }

        /* Header Styles */
        .header {
            height: var(--header-height);
            background: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 1.5rem;
            position: sticky;
            top: 0;
            z-index: 90;
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .toggle-sidebar {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: var(--dark-color);
            cursor: pointer;
            margin-right: 1rem;
            display: none;
        }

        .search-bar {
            position: relative;
        }

        .search-bar input {
            padding: 0.5rem 1rem 0.5rem 2.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            width: 250px;
            transition: var(--transition);
        }

        .search-bar input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .search-bar i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #777;
        }

        .header-right {
            display: flex;
            align-items: center;
        }

        .notification, .user-profile {
            position: relative;
            margin-left: 1.5rem;
            cursor: pointer;
        }

        .notification i, .user-profile i {
            font-size: 1.2rem;
            color: #555;
        }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: var(--danger-color);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.6rem;
            font-weight: bold;
        }

        .toast-custom {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  min-width: 250px;
  max-width: 350px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  transform: translateX(0);
  opacity: 1;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  padding: 0;
  border: none;
}

/* Toast when hiding */
.toast-custom.hide {
  transform: translateX(100%);
  opacity: 0;
}

/* Toast Body */
.toast-custom-body {
  padding: 16px;
  flex-grow: 1;
  color: white;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  font-size: 14px;
  line-height: 1.5;
}

/* Close Button */
.toast-custom-close {
  background: transparent;
  border: none;
  color: white;
  opacity: 0.8;
  padding: 16px;
  cursor: pointer;
  transition: opacity 0.2s;
  display: flex;
  align-items: center;
}

.toast-custom-close:hover {
  opacity: 1;
}

/* Success Variant */
.toast-custom.success {
  background: #28a745;
}

/* Error Variant */
.toast-custom.error {
  background: #dc3545;
}

/* Warning Variant */
.toast-custom.warning {
  background: #ffc107;
  color: #212529;
}

.toast-custom.warning .toast-custom-body,
.toast-custom.warning .toast-custom-close {
  color: #212529;
}

/* Info Variant */
.toast-custom.info {
  background: #17a2b8;
}

/* Animation */
@keyframes slideIn {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

        .user-profile img {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            object-fit: cover;
        }

        /* Content Area Styles */
        .content {
            padding: 1.5rem;
        }

        .page-header {
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .page-title {
            font-size: 1.5rem;
            color: var(--dark-color);
        }

        .btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 4px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background: #00b4d8;
        }

        .btn-warning {
            background: var(--warning-color);
            color: white;
        }

        .btn-warning:hover {
            background: #f3722c;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background: #d32f2f;
        }

        .btn-group {
            display: flex;
            gap: 0.5rem;
        }

        /* Post Detail Form */
        .post-detail {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            color: #555;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.9rem;
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
        }

        textarea.form-control {
            min-height: 300px;
            resize: vertical;
        }

        .select2-container {
            width: 100% !important;
        }

        .select2-container--default .select2-selection--multiple {
            border: 1px solid #ddd;
            border-radius: 4px;
            min-height: 38px;
            padding: 0.3rem;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background-color: var(--primary-color);
            border: none;
            color: white;
            border-radius: 4px;
            padding: 0 0.5rem;
        }

        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
            color: white;
            margin-right: 0.3rem;
        }

        /* Featured Image */
        .featured-image-container {
            display: flex;
            flex-direction: column;
        }

        .featured-image-preview {
            width: 100%;
            max-height: 300px;
            object-fit: cover;
            border-radius: 4px;
            margin-bottom: 1rem;
        }

        .image-upload {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 2rem;
            border: 2px dashed #ddd;
            border-radius: 4px;
            cursor: pointer;
            transition: var(--transition);
        }

        .image-upload:hover {
            border-color: var(--primary-color);
        }

        .image-upload i {
            font-size: 2rem;
            color: #777;
            margin-bottom: 1rem;
        }

        .image-upload p {
            color: #777;
            font-size: 0.9rem;
        }

        .image-upload input {
            display: none;
        }

        /* Status and Meta */
        .post-meta {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .meta-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
        }

        .meta-card h3 {
            font-size: 1rem;
            color: var(--dark-color);
            margin-bottom: 1rem;
        }

        .status-badge {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-size: 0.85rem;
            font-weight: 500;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .status-draft {
            background: rgba(255, 152, 0, 0.1);
            color: #ff9800;
            border: 1px solid #ff9800;
        }

        .status-pending {
            background: rgba(33, 150, 243, 0.1);
            color: #2196f3;
            border: 1px solid #2196f3;
        }

        .status-published {
            background: rgba(76, 175, 80, 0.1);
            color: #4caf50;
            border: 1px solid #4caf50;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .checkbox-group input {
            margin-right: 0.5rem;
        }

        /* Responsive Styles */
        @media (max-width: 1200px) {
            .sidebar {
                width: 70px;
                overflow: hidden;
            }

            .sidebar-header h3, .sidebar-menu span {
                display: none;
            }

            .sidebar-menu a {
                justify-content: center;
                padding: 0.8rem;
            }

            .sidebar-menu i {
                margin-right: 0;
                font-size: 1.3rem;
            }

            .main-content {
                margin-left: 70px;
            }
        }

        @media (max-width: 992px) {
            .post-meta {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                left: -100%;
            }

            .sidebar.active {
                left: 0;
            }

            .main-content {
                margin-left: 0;
            }

            .toggle-sidebar {
                display: block;
            }

            .search-bar input {
                width: 180px;
            }

            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .btn-group {
                width: 100%;
            }

            .btn-group .btn {
                flex: 1;
                text-align: center;
            }
        }

        @media (max-width: 576px) {
            .header {
                padding: 0 1rem;
            }

            .search-bar input {
                width: 120px;
                padding-left: 2rem;
            }

            .content {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="dashboard">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>KnowYourGovNow</h3>
                <button class="sidebar-collapse">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <ul class="sidebar-menu">
                <li>
                    <a href="/Admin/dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/posts" class="active">
                        <i class="fas fa-newspaper"></i>
                        <span>Posts</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/categories-tags">
                        <i class="fas fa-tags"></i>
                        <span>Categories & Tags</span>
                    </a>
                </li>
                <li>
                    <a href="/Admin/settings">
                        <i class="fas fa-cog"></i>
                        <span>Settings</span>
                    </a>
                </li>

                <li>
                    <a href="/Admin/comments">
                        <i class="fas fa-comments"></i>
                        <span>Comments</span>
                    </a>
                </li>

                <li>
                    <a href="/Admin/support">
                        <i class="fas fa-question-circle"></i>
                        <span>Support</span>
                    </a>
                </li>

                <li>
    <a href="/logout">
        <i class="fas fa-sign-out-alt"></i>
        <span>Log Out</span>
    </a>
</li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <header class="header">
                <div class="header-left">
                    <button class="toggle-sidebar">
                        <i class="fas fa-bars"></i>
                    </button>
                  <div hidden class="search-bar">
                        <i class="fas fa-search"></i>
                        <input type="text" placeholder="Search...">
                    </div>
                </div>
                <div class="header-right">
                    <div hidden class="notification">
                        <i class="fas fa-bell"></i>
                        <span class="notification-badge">3</span>
                    </div>
                    <div class="user-profile">
                        <img src="/images/add-image.png" alt="User">
                    </div>
                </div>
            </header>

            <!-- Content Area -->
            <div class="content">
                <div class="page-header">
                    <h1 class="page-title">Edit Post: "Getting Started with React Hooks"</h1>
                    <div class="btn-group">
                        <button class="btn btn-success" id="publishBtn">
                            <i class="fas fa-check-circle"></i> Publish
                        </button>
                        <button class="btn btn-primary" id="saveDraftBtn">
                            <i class="fas fa-save"></i> Save Draft
                        </button>
                        <button class="btn btn-danger" id="deleteBtn">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>

                <!-- Post Meta Information -->
                <div class="post-meta">
                    <div class="meta-card">
                        <h3>Status</h3>
                        <div>
                            <span class="status-badge status-pending">Pending Review</span>
                        </div>
                        <div class="checkbox-group" style="margin-top: 1rem;">
                            <input type="checkbox" id="featuredPost" checked>
                            <label for="featuredPost">Featured Post</label>
                        </div>
                    </div>

                    <div class="meta-card">
                        <h3>Post Views</h3>
                        <span id="post-views" class="status-badge status-publish">
                            <i class="fas fa-eye"></i> 1,234
                        </span>
                    </div>

                    <div class="meta-card">
                        <h3>Publish Date</h3>
                        <input type="datetime-local" class="form-control" value="2023-06-20T10:30">
                    </div>

                    <div class="meta-card">
                        <h3>Author</h3>
                        <select  id="postAuthor" class="form-control">
                            <option value="1" selected>Admin</option>
                        </select>
                    </div>
                </div>

                <!-- Post Detail Form -->
                <div class="post-detail">
                    <form id="editPostForm">
                        <div class="form-group">
                            <label for="postTitle">Title</label>
                            <input type="text" id="postTitle" class="form-control" 
                                   value="Getting Started with React Hooks" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="postSlug">Slug</label>
                            <input type="text" id="postSlug" class="form-control" 
                                   value="getting-started-with-react-hooks" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="editor">Content</label>
                            <textarea id="editor" class="form-control" rows="20" required>
<h2>Introduction to React Hooks</h2>

<p>React Hooks, introduced in React 16.8, allow you to use state and other React features without writing a class. Hooks are functions that let you "hook into" React state and lifecycle features from function components.</p>

<p>In this tutorial, we'll cover the most commonly used hooks:</p>

<ul>
    <li><strong>useState</strong> - For managing state in functional components</li>
    <li><strong>useEffect</strong> - For side effects (data fetching, subscriptions, etc.)</li>
    <li><strong>useContext</strong> - For accessing context in functional components</li>
    <li><strong>useReducer</strong> - An alternative to useState for complex state logic</li>
</ul>

<h3>Basic useState Example</h3>

<pre><code>import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  return (
    &lt;div&gt;
      &lt;p&gt;You clicked {count} times&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &lt;/button&gt;
    &lt;/div&gt;
  );
}</code></pre>

<p>This simple example demonstrates how useState allows us to add state to functional components.</p>
                            </textarea>
                        </div>
                        
                        <div class="form-group">
                            <label>Featured Image</label>
                            <div class="featured-image-container">
                                <img src="https://images.unsplash.com/photo-1633356122544-f134324a6cee?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80" 
                                     alt="Featured Image" class="featured-image-preview">
                                <div class="image-upload" id="imageUpload">
                                    <i class="fas fa-cloud-upload-alt"></i>
                                    <p>Click to change featured image</p>
                                    <input type="file" id="featuredImage" accept="image/*">
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="postCategories">Categories</label>
                            <select id="postCategories" class="form-control" multiple>
                                <option value="1" selected>Development</option>
                                <option value="2">JavaScript</option>
                                <option value="3">React</option>
                                <option value="4">Tutorials</option>
                                <option value="5">Web Development</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="postTags">Tags</label>
                            <select id="postTags" class="form-control" multiple>
                                <option value="1" selected>React</option>
                                <option value="2" selected>Hooks</option>
                                <option value="3">Frontend</option>
                                <option value="4">JavaScript</option>
                                <option value="5">Web Development</option>
                            </select>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
        <script src="https://cdn.ckeditor.com/ckeditor5/41.1.0/classic/ckeditor.js"></script>


      <script>
            let ckeditorInstance;
let postContent = '';

ClassicEditor.create(document.querySelector('#editor'), {
    ckfinder: { uploadUrl: '/ckeditor-upload' }
})
.then(editor => {
    ckeditorInstance = editor;
    if (postContent) ckeditorInstance.setData(postContent);
})
.catch(error => { console.error(error); });

function setEditorContent(content) {
    postContent = content;
    if (ckeditorInstance) ckeditorInstance.setData(content);
}

  function getPostId() {
    const params = new URLSearchParams(window.location.search);
    return params.get('id');
}

        $(document).ready(function() {
             const postId = getPostId();

  
    Promise.all([
        fetch('/categories').then(res => res.json()),
        fetch('/tags').then(res => res.json()),
        fetch(`/post/${postId}`).then(res => res.json())
    ]).then(([categories, tags, post]) => {
       // window.currentPostStatus = post.status;
        
     const $categories = $('#postCategories');
    $categories.empty();
    categories.forEach(cat => {
        $categories.append(`<option value="${cat.id}">${cat.name}</option>`);
    });
    $categories.val(post.categories || []).trigger('change');

 const $tags = $('#postTags');
    $tags.empty();
  tags.forEach(tag => {
    $tags.append(`<option value="${tag.tag_id}" data-slug="${tag.slug}">${tag.name}</option>`);
});
    $tags.val(post.tags || []).trigger('change');


       $('.page-title').text(`Edit Post: "${post.title || ''}"`);

let statusText = 'Pending Review';
let statusClass = 'status-pending';
if (post.status === 'publish') {
    statusText = 'Published';
    statusClass = 'status-published';
} else if (post.status === 'draft') {
    statusText = 'Draft';
    statusClass = 'status-draft';
}
$('.status-badge').text(statusText).attr('class', `status-badge ${statusClass}`);

$('#featuredPost').prop('checked', post.is_featured == 1 || post.is_featured === "1");

$('#post-views').text(`Views: ${post.views || 0}`);

if (post.created_at) {
    const dt = new Date(post.created_at);
    const formatted = dt.toISOString().slice(0,16);
    $('.meta-card input[type="datetime-local"]').val(formatted);
}

fetch('/users') 
    .then(res => res.json())
    .then(users => {
        const $authorSelect = $('#postAuthor');
        $authorSelect.empty();
        users.forEach(user => {
            $authorSelect.append(`<option value="${user.id}">${user.name}</option>`);
        });
        $authorSelect.val(post.author_id);
    });

    if (post.author_id) {
        fetch(`/user-post/${post.author_id}`)
            .then(res => res.json())
            .then(user => {
              
                let $authorSelect = $('#postAuthor');
                $authorSelect.empty();
                $authorSelect.append(`<option value="${user.id}" selected>${user.name}</option>`);
            })
            .catch(() => {
                $('#postAuthor').val(post.author_id);
            });
    }
        $('#postTitle').val(post.title || '');
        $('#postSlug').val(post.slug || '');
      setEditorContent(post.content || '');

        if (post.feature_image) {
            $('.featured-image-preview').attr('src', post.feature_image).addClass('active');
        }
        $('#featuredPost').prop('checked', post.is_featured ? true : false);

        
        if (post.author_id) {
            $('#postAuthor').val(post.author_id);
        }
    });

    
    $('#postCategories').select2({
        placeholder: "Select categories",
        allowClear: true,
        dropdownParent: $('#editPostForm')
    });

    $('#postTags').select2({
        placeholder: "Select tags",
        tags: true,
        allowClear: true,
        dropdownParent: $('#editPostForm')
    });

    // Slug update logic
 function updateSlug() {
    const title = $('#postTitle').val().trim();
    // Get selected tag slugs
    const tagSlugs = $('#postTags').find('option:selected').map(function() {
        return $(this).data('slug') || $(this).text().toLowerCase().replace(/\s+/g, '-');
    }).get();
    let slugBase = title + (tagSlugs.length ? '-' + tagSlugs.join('-') : '');
    let slug = slugBase.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-');
    $('#postSlug').val(slug);
}

    $('#postTitle').on('input', updateSlug);
    $('#postTags').on('change', updateSlug);
    $('#postCategories').on('change', updateSlug);
        });


     
        document.querySelector('.toggle-sidebar').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.toggle('active');
        });

       
        document.querySelector('.sidebar-collapse').addEventListener('click', function() {
            document.querySelector('.sidebar').classList.remove('active');
        });


        
      
        document.getElementById('featuredImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    document.querySelector('.featured-image-preview').src = event.target.result;
                }
                reader.readAsDataURL(file);
            }
        });


  document.getElementById('imageUpload').addEventListener('click', function(e) {
    const featuredImage = document.getElementById('featuredImage');
    if (e.target !== featuredImage) {
        featuredImage.click();
    }
});
      
        document.getElementById('postTitle').addEventListener('input', function() {
            const title = this.value;
            const slug = title.toLowerCase()
                .replace(/[^\w\s]/g, '') 
                .replace(/\s+/g, '-')     
                .replace(/-+/g, '-');    
            document.getElementById('postSlug').value = slug;
        });

        
    document.getElementById('publishBtn').addEventListener('click', function() {
    if (!confirm('Are you sure you want to publish this post?')) return;
    const postId = getPostId();
    const title = document.getElementById('postTitle').value.trim();
    const slug = document.getElementById('postSlug').value.trim();
    const content = ckeditorInstance.getData();
    const categories = $('#postCategories').val();
    const tags = $('#postTags').val();
    const is_featured = document.getElementById('featuredPost').checked ? 1 : 0;
    const status = 'publish';
    const feature_image = document.getElementById('featuredImage').files[0];
    

    const formData = new FormData();
    formData.append('title', title);
    formData.append('slug', slug);
    formData.append('content', content);
    formData.append('categories', JSON.stringify(categories));
    formData.append('tags', JSON.stringify(tags));
    formData.append('is_featured', is_featured);
    formData.append('status', status);
    if (feature_image) formData.append('feature_image', feature_image);

    fetch(`/post/${postId}`, {
        method: 'PATCH',
        body: formData
    })
    .then(res => res.json())
    .then(data => {
        showToast(data.message);
        location.reload();
    })
    .catch(() => showToast('Error publishing post', 'danger'));
});

        
      document.getElementById('saveDraftBtn').addEventListener('click', function() {
    const postId = getPostId();
    const title = document.getElementById('postTitle').value.trim();
    const slug = document.getElementById('postSlug').value.trim();
    const content = ckeditorInstance.getData();
    const categories = $('#postCategories').val();
    const tags = $('#postTags').val();
    const is_featured = document.getElementById('featuredPost').checked ? 1 : 0;
    const status = 'draft';
    const feature_image = document.getElementById('featuredImage').files[0];

   //  if (window.currentPostStatus === 'publish') {
   //     status = 'publish';
   // }

    const formData = new FormData();
    formData.append('title', title);
    formData.append('slug', slug);
    formData.append('content', content);
    formData.append('categories', JSON.stringify(categories));
    formData.append('tags', JSON.stringify(tags));
    formData.append('is_featured', is_featured);
    formData.append('status', status);
    if (feature_image) formData.append('feature_image', feature_image);

    fetch(`/post/${postId}`, {
        method: 'PATCH',
        body: formData
    })
    .then(res => res.json())
    .then(data => {
        showToast(data.message);
        location.reload(); 
    })
    .catch(() => showToast('Error saving draft', 'danger'));
});


    document.getElementById('deleteBtn').addEventListener('click', function() {
    if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) return;
    const postId = getPostId();

    fetch(`/post/${postId}`, { method: 'DELETE' })
        .then(res => res.json())
        .then(data => {
            showToast(data.message);
            window.location.href = '/Admin/posts';
        })
        .catch(() => showToast('Error deleting post', 'danger'));
});

       
        function handleSidebar() {
            const sidebar = document.querySelector('.sidebar');
            const screenWidth = window.innerWidth;
            
            if (screenWidth <= 768) {
                sidebar.classList.remove('active');
            } else {
                sidebar.classList.add('active');
            }
        }

        
        window.addEventListener('load', handleSidebar);
        window.addEventListener('resize', handleSidebar);
    </script>
  <script>
function showToast(message, type = "success") {
  const toast = document.createElement("div");
  toast.className = `toast-custom ${type}`;
  
  toast.innerHTML = `
    <div class="toast-custom-body">${message}</div>
    <button class="toast-custom-close" aria-label="Close">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>
  `;

  document.body.appendChild(toast);

  setTimeout(() => {
    toast.style.animation = "slideIn 0.3s forwards";
  }, 10);

  
  const removeToast = () => {
    toast.classList.add('hide');
    setTimeout(() => toast.remove(), 300);
  };

  
  const timeoutId = setTimeout(removeToast, 3500);


  toast.querySelector('.toast-custom-close').onclick = () => {
    clearTimeout(timeoutId);
    removeToast();
  };
}
</script>
</body>
</html>